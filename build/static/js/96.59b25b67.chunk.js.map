{"version":3,"file":"static/js/96.59b25b67.chunk.js","mappings":"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","sources":["components/common/TableGrid/TableGrid.js","components/modules/StudentData/StudentData.js","components/modules/AddStudents/StudentDetails.js"],"sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useTable, useRowSelect, usePagination } from \"react-table\";\r\nimport { FaTrash, FaEdit } from \"react-icons/fa\";\r\nconst Styles = styled.div`\r\n  /* This is required to make the table full-width */\r\n  display: block;\r\n  max-width: 100%;\r\n\r\n  /* This will make the table scrollable when it gets too small */\r\n  .tableWrap {\r\n    display: block;\r\n    max-width: 100%;\r\n    overflow-x: scroll;\r\n    overflow-y: hidden;\r\n    border-bottom: 1px solid black;\r\n  }\r\n\r\n  table {\r\n    /* Make sure the inner table is always as wide as needed */\r\n    width: 100%;\r\n    border-spacing: 0;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      /* The secret sauce */\r\n      /* Each cell should grow equally */\r\n      width: 1%;\r\n      /* But \"collapsed\" cells should be as small as possible */\r\n      &.collapse {\r\n        width: 0.0000000001%;\r\n      }\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  .pagination {\r\n    padding: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TableGrid = ({ columns, data, handleAction, deleteBtnEn, editBtnEn }) => {\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page, // Instead of using 'rows', we'll use page,\r\n    // which has only the rows for the active page\r\n\r\n    // The rest of these things are super handy, too ;)\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: { pageIndex: 0, pageSize: 4 },\r\n    },\r\n    usePagination,\r\n    useRowSelect,\r\n    (hooks) => {\r\n      hooks.visibleColumns.unshift((columns) => [\r\n        ...columns,\r\n        // Let's make a column for selection\r\n        {\r\n          id: \"delete-selection\",\r\n          // The header can use the table's getToggleAllRowsSelectedProps method\r\n          // to render a checkbox\r\n          Header: \"Action\",\r\n          // The cell can use the individual row's getToggleRowSelectedProps method\r\n          // to the render a checkbox\r\n          Cell: ({ row }) => (\r\n            <>\r\n              {editBtnEn && (\r\n                <span\r\n                  className='icon'\r\n                  onClick={() => handleAction(row, \"edit\")}\r\n                >\r\n                  <FaEdit />\r\n                </span>\r\n              )}\r\n              {deleteBtnEn && (\r\n                <span\r\n                  className='icon'\r\n                  onClick={() => handleAction(row, \"delete\")}\r\n                >\r\n                  <FaTrash />\r\n                </span>\r\n              )}\r\n            </>\r\n          ),\r\n        },\r\n      ]);\r\n    }\r\n  );\r\n  return (\r\n    <Styles>\r\n      <div className='tableWrap'>\r\n        <table {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps()}>\r\n                    {column.render(\"Header\")}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      {/* \r\n        Pagination can be built however you'd like. \r\n        This is just a very basic UI implementation:\r\n      */}\r\n      <div className='pagination'>\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {\"<<\"}\r\n        </button>{\" \"}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {\"<\"}\r\n        </button>{\" \"}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {\">\"}\r\n        </button>{\" \"}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {\">>\"}\r\n        </button>{\" \"}\r\n        <span>\r\n          Page{\" \"}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{\" \"}\r\n        </span>\r\n        <span>\r\n          | Go to page:{\" \"}\r\n          <input\r\n            type='number'\r\n            defaultValue={pageIndex + 1}\r\n            onChange={(e) => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n              gotoPage(page);\r\n            }}\r\n            style={{ width: \"100px\" }}\r\n          />\r\n        </span>{\" \"}\r\n        <select\r\n          value={pageSize}\r\n          onChange={(e) => {\r\n            setPageSize(Number(e.target.value));\r\n          }}\r\n        >\r\n          {[10, 20, 30, 40, 50].map((pageSize) => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </Styles>\r\n  );\r\n};\r\n\r\nexport default TableGrid;\r\n","import axios from \"axios\";\r\nimport moment from \"moment/moment\";\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport { appActionTypes, AppStore } from \"../../../context/AppContext\";\r\nimport TableGrid from \"../../common/TableGrid/TableGrid\";\r\nimport { FaTrash, FaEdit } from \"react-icons/fa\";\r\nimport Modal from \"../../common/Modal/Modal\";\r\n\r\nconst tt = [\r\n  {\r\n    id: \"delete-icon\",\r\n    actionIcon: <FaTrash />,\r\n    className: \"icon\",\r\n  },\r\n  {\r\n    id: \"editIcon\",\r\n    actionIcon: <FaEdit />,\r\n    className: \"icon\",\r\n  },\r\n];\r\n\r\nconst StudentData = ({ getAllStudentsData }) => {\r\n  const { appActionDispatch } = useContext(AppStore);\r\n  const { appState } = useContext(AppStore);\r\n  const { studentData } = appState;\r\n\r\n  useEffect(() => {\r\n    getAllStudentsData();\r\n  }, []);\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Students Detals Grid\",\r\n        columns: [\r\n          // {\r\n          //   Header: \"ID\",\r\n          //   accessor: \"_id\",\r\n          // },\r\n          {\r\n            Header: \"Date\",\r\n            accessor: \"formattedDate\",\r\n          },\r\n          {\r\n            Header: \"Student Name\",\r\n            accessor: \"studentName\",\r\n          },\r\n\r\n          {\r\n            Header: \"Vaccine Status\",\r\n            accessor: \"tt\",\r\n          },\r\n          {\r\n            Header: \"Vaccine Name\",\r\n            accessor: \"vaccineName\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const newTableData = studentData.map((obj) => {\r\n    const newObj = {\r\n      ...obj,\r\n      tt: obj[\"vaccineStatus\"] === true ? \"Vaccinated\" : \"Not Vaccinated\",\r\n      formattedDate: moment(obj[\"date\"]).format(\"DD/MM/YYYY\"),\r\n    };\r\n    return newObj;\r\n  });\r\n  const handleAction = (row, type) => {\r\n    console.log(\"RoW\", row, type);\r\n  };\r\n  return (\r\n    <div>\r\n      {/* <Modal modalId={tt}>hdfjdfhj</Modal> */}\r\n      <TableGrid\r\n        columns={columns}\r\n        data={newTableData}\r\n        handleAction={handleAction}\r\n        actionIcons={tt}\r\n        editBtnEn\r\n        deleteBtnEn\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentData;\r\n","import axios from \"axios\";\r\nimport React, { useContext } from \"react\";\r\nimport { appActionTypes, AppStore } from \"../../../context/AppContext\";\r\nimport StudentData from \"../StudentData/StudentData\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst StudentDetailschema = Yup.object().shape({\r\n  studentName: Yup.string().required(\"Student name required\"),\r\n  vaccineName: Yup.string().required(\"Vaccine name is required\"),\r\n});\r\n\r\nconst StudentDetails = () => {\r\n  const { appActionDispatch } = useContext(AppStore);\r\n  const getAllStudentsData = async () => {\r\n    appActionDispatch({\r\n      type: appActionTypes.setLoader,\r\n      payload: true,\r\n    });\r\n    try {\r\n      const data = await axios.get(\"http://localhost:4000/api/v1/student\");\r\n      if (data) {\r\n        appActionDispatch({\r\n          type: appActionTypes.setStudentData,\r\n          payload: data.data.data,\r\n        });\r\n        appActionDispatch({\r\n          type: appActionTypes.setLoader,\r\n          payload: false,\r\n        });\r\n      }\r\n      console.log(\"#DD>\", data);\r\n      return data;\r\n    } catch (err) {\r\n      console.log(\"error: \", err);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (payload) => {\r\n    debugger;\r\n    // e.preventDefault();\r\n    // const payload = {\r\n    //   studentName: f,\r\n    //     vaccineName: \"\",?\r\n    // };\r\n    // console.log(\"EEEE\", e);\r\n    try {\r\n      const data = await axios.post(\r\n        \"http://localhost:4000/api/v1/student\",\r\n        payload\r\n      );\r\n      if (data) {\r\n        getAllStudentsData();\r\n        const notify = () => toast(\"Student Added Successfully 😲!\");\r\n        notify();\r\n      }\r\n      console.log(\"#DD>\", data);\r\n      // setStudent({\r\n      //   studentName: \"\",\r\n      //   vaccineName: \"\",\r\n      // });\r\n      return data;\r\n    } catch (err) {\r\n      console.log(\"error: \", err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='dashboard-main'>\r\n      <Formik\r\n        initialValues={{\r\n          studentName: \"\",\r\n          vaccineName: \"\",\r\n        }}\r\n        validationSchema={StudentDetailschema}\r\n        className='student-form '\r\n        onSubmit={(values, { resetForm }) => {\r\n          console.log(values);\r\n          handleSubmit(values);\r\n          resetForm();\r\n        }}\r\n      >\r\n        {({ touched, errors, isSubmitting, values }) => {\r\n          return (\r\n            <Form>\r\n              <div className='col-6 mb-4'>\r\n                <label htmlFor='studentName' className='mb-2'>\r\n                  Student Name\r\n                </label>\r\n                <Field\r\n                  type='text'\r\n                  className='form-control'\r\n                  id='studentName'\r\n                  name='studentName'\r\n                  placeholder='Student Name'\r\n                />\r\n                <ErrorMessage\r\n                  component='div'\r\n                  name='studentName'\r\n                  className='error'\r\n                />\r\n              </div>\r\n              <div className='col-6 mb-4'>\r\n                <label htmlFor='vaccineName' className='mb-2'>\r\n                  Vaccine\r\n                </label>\r\n                <Field\r\n                  type='text'\r\n                  className='form-control'\r\n                  id='vaccineName'\r\n                  name='vaccineName'\r\n                  placeholder='Vaccine Name'\r\n                />\r\n                <ErrorMessage\r\n                  component='div'\r\n                  name='vaccineName'\r\n                  className='error'\r\n                />\r\n              </div>\r\n              <div className='col-6 mb-3'>\r\n                <button type='submit' className='btn btn-primary mb-3'>\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n\r\n      <StudentData getAllStudentsData={getAllStudentsData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentDetails;\r\n"],"names":["Styles","styled","columns","data","handleAction","deleteBtnEn","editBtnEn","useTable","initialState","pageIndex","pageSize","usePagination","useRowSelect","hooks","visibleColumns","unshift","id","Header","Cell","row","className","onClick","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","disabled","length","type","defaultValue","onChange","e","target","value","Number","style","width","tt","actionIcon","getAllStudentsData","studentData","useContext","AppStore","appActionDispatch","appState","useEffect","React","accessor","newTableData","obj","formattedDate","moment","format","console","log","actionIcons","StudentDetailschema","Yup","shape","studentName","required","vaccineName","appActionTypes","payload","axios","handleSubmit","toast","notify","initialValues","validationSchema","onSubmit","values","resetForm","touched","errors","isSubmitting","htmlFor","name","placeholder","component"],"sourceRoot":""}